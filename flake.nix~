{
  description = "CrabbyDisk's personal NixOS config!";

  inputs = {
    # Nixpkgs
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";

    # Stylix
    stylix.url = "github:danth/stylix";
    stylix.inputs.nixpkgs.follows = "nixpkgs";

    #nvf
    nvf.url = "github:notashelf/nvf";
    nvf.inputs.nixpkgs.follows = "nixpkgs";

    # Home Manager
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    #Zen browser
    zen-browser.url = "github:youwen5/zen-browser-flake";
    zen-browser.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = {
    self,
    nixpkgs,
    home-manager,
    stylix,
    nvf,
    ...
  } @ inputs: let
    inherit (self) outputs;
    # Supported systems for your flake packages, shell, etc.
    systems = ["x86_64-linux"];
    # This is a function that generates an attribute by calling a function you
    # pass to it, with each system as an argument
    forAllSystems = nixpkgs.lib.genAttrs systems;
  in {
    # Your custom packages
    # Accessible through 'nix build', 'nix shell', etc
    # Formatter for your nix files, available through 'nix fmt'
    # Other options beside 'alejandra' include 'nixpkgs-fmt'
    formatter = forAllSystems (system: nixpkgs.legacyPackages.${system}.alejandra);

    packages = forAllSystems (
      system: {
        nvf =
          (nvf.lib.neovimConfiguration {
            pkgs = nixpkgs.legacyPackages.${system};
            modules = [./nvf];
          })
          .neovim;
      }
    );

    /*
     packages."x86_64-linux".nvf =
    (nvf.lib.neovimConfiguration {
      pkgs = nixpkgs.legacyPackages."x86_64-linux";
      modules = [./nvf];
    })
    .neovim;
    */

    overlays = import ./overlays {inherit inputs;};

    # Your custom packages and modifications, exported as overlays
    # Reusable nixos modules you might want to export
    # These are usually stuff you would upstream into nixpkgs
    # Reusable home-manager modules you might want to export
    # These are usually stuff you would upstream into home-manager

    homeConfigurations."crabbydisk" = home-manager.lib.homeManagerConfiguration {
      extraSpecialArgs = {inherit inputs outputs;};
      modules = [stylix.homeManagerModules.stylix ./home/home.nix];

      pkgs = import nixpkgs {system = "x86_64-linux";};
    };

    nixosConfigurations = {
      good-pc = nixpkgs.lib.nixosSystem {
        specialArgs = {inherit inputs outputs;};
        modules = [
          ./system/configuration.nix
        ];
      };
    };
  };
}
